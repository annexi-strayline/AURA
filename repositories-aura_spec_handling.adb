------------------------------------------------------------------------------
--                                                                          --
--                     Ada User Repository Annex (AURA)                     --
--                         Reference Implementation                         --
--                                                                          --
-- ------------------------------------------------------------------------ --
--                                                                          --
--  Copyright (C) 2020-2023, ANNEXI-STRAYLINE Trans-Human Ltd.              --
--  All rights reserved.                                                    --
--                                                                          --
--  Original Contributors:                                                  --
--  * Richard Wai (ANNEXI-STRAYLINE)                                        --
--                                                                          --
--  Redistribution and use in source and binary forms, with or without      --
--  modification, are permitted provided that the following conditions are  --
--  met:                                                                    --
--                                                                          --
--      * Redistributions of source code must retain the above copyright    --
--        notice, this list of conditions and the following disclaimer.     --
--                                                                          --
--      * Redistributions in binary form must reproduce the above copyright --
--        notice, this list of conditions and the following disclaimer in   --
--        the documentation and/or other materials provided with the        --
--        distribution.                                                     --
--                                                                          --
--      * Neither the name of the copyright holder nor the names of its     --
--        contributors may be used to endorse or promote products derived   --
--        from this software without specific prior written permission.     --
--                                                                          --
--  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS     --
--  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT       --
--  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A --
--  PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT      --
--  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   --
--  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT        --
--  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   --
--  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   --
--  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT     --
--  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   --
--  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    --
--                                                                          --
------------------------------------------------------------------------------

with Ada.Text_IO;
with Ada.Directories;
with Ada.Characters.Handling;

with User_Queries;
with Platform_Info;
with Registrar.Registration;
with Unicode.Case_Folding.Simple;


separate (Repositories)

package body AURA_Spec_Handling is
   
   ---------------------
   -- Check_AURA_Spec --
   ---------------------
   
   procedure Check_AURA_Spec 
     (Stream  : not null access Ada.Streams.Root_Stream_Type'Class;
      Correct : out Boolean)
   is separate;
   
   
   ------------------------
   -- Generate_AURA_Spec --
   ------------------------
   
   procedure Generate_AURA_Spec
     (Stream: not null access Ada.Streams.Root_Stream_Type'Class)
   is
      use type Ada.Directories.File_Kind;
      
      procedure Put (Item: in Repository_Format) with Inline is
      begin
         String'Write 
           (Stream, 
            Ada.Characters.Handling.To_Lower
              (Repository_Format'Image (Item)));
      end;
      
      procedure Put (Item: in String) with Inline is
      begin
         String'Write (Stream, Item);
      end;
      
      procedure Put_Line (Item: in String) with Inline is
      begin
         String'Write (Stream, Item & New_Line);
      end;
      
      procedure New_Line with Inline is
      begin
         Character'Write (Stream, Repositories.New_Line);
      end;

      Tab: constant String := (1 .. 4 => ' ');
      
   begin
      Put_Line 
        ("-- This specification was automatically generated by the AURA CLI");
      
      Put_Line
        ("-- DO NOT MODIFY");
      
      New_Line;
      Put_Line ("package AURA with Pure is");
      
      -- Repository format
      New_Line;
      Put (Tab & "type Repository_Format is (");
      
      for Format in Repository_Format loop
         if Format /= Repository_Format'First then
            Put (", ");
         end if;
         
         Put (Format);
      end loop;
      
      Put_Line (");");
      New_Line;
      
      -- Platform info
      declare
         package PI renames Platform_Info;
         
         procedure CS (Name, Value: in String) with Inline is
         begin
            Put_Line (Tab & Name & ": constant String := """ & Value & """;");
         end CS;
      begin
         CS (Name => "Platform_Family",       Value => PI.Platform_Family);
         CS (Name => "Platform_Flavor",       Value => PI.Platform_Flavor);
         CS (Name => "Platform_Version",      Value => PI.Platform_Version);
         CS (Name => "Platform_Architecture", Value => PI.Platform_Architecture);
      end;
      
      New_Line;
      Put_Line ("end AURA;");
   end Generate_AURA_Spec;
   
   
   -----------------------------------
   -- Check_Or_Regenerate_AURA_Spec --
   -----------------------------------
   
   procedure Check_Or_Regenerate_AURA_Spec
     (AURA_Spec_Unit: in Registrar.Library_Units.Library_Unit)
   is
      use Registrar.Source_Files;
      
      AURA_Spec_Correct: Boolean := False;
      Go_For_Regen     : Boolean := False;
   begin
      
      declare
         AURA_Spec_Stream: aliased Source_Stream
           := Checkout_Read_Stream (AURA_Spec_Unit.Spec_File);
      begin
         Check_AURA_Spec (Stream  => AURA_Spec_Stream'Access,
                          Correct => AURA_Spec_Correct);
      end;
      
      if not AURA_Spec_Correct then
         declare
            use User_Queries;
            Query_Response: String (1 .. 1);
            Last: Natural;
         begin
            loop
               Query_Manager.Start_Query;
               -- Note that validation info messages should be output
               -- before this query, so the user will have some context
               Query_Manager.Post_Query
                 (Prompt => " AURA root specification is not currently valid, "
                    & "regenerate? (y/n)",
                  Default       => "y",
                  Response_Size => 1);
               
               Query_Manager.Wait_Response (Response => Query_Response,
                                            Last     => Last);
               
               Query_Manager.End_Query;
               
               if Last = 1 then
                  if Query_Response in "Y" | "y" then
                     Go_For_Regen := True;
                     exit;
                     
                  elsif Query_Response in "N" | "n" then
                     Assert (False, "AURA root specification is not valid. "
                               & "Delete and re-run to auto-generate. "
                               & "or answer 'y' to the query. Aborting.");
                  end if;
               end if;
            end loop;
         exception
            when others =>
               if Query_Manager.Query_Active then
                  Query_Manager.End_Query;
               end if;
               raise;
         end;
      end if;
      
      if Go_For_Regen then
         declare
            AURA_Rewrite: aliased Source_Stream
              := Checkout_Write_Stream (Source  => AURA_Spec_Unit.Spec_File,
                                        Rewrite => True);
         begin
            Generate_AURA_Spec (AURA_Rewrite'Access);
         end;
      end if;
      
   end Check_Or_Regenerate_AURA_Spec;
   
   
   ------------------------
   -- Register_AURA_Spec --
   ------------------------
   
   procedure Register_AURA_Spec is
      use Ada.Directories;
      
      Spec_Directory: constant String := Compose
        (Containing_Directory => Current_Directory,
         Name                 => "aura");
      
      Search: Search_Type;
      Spec  : Directory_Entry_Type;
   begin
      Start_Search (Search    => Search,
                    Directory => Spec_Directory,
                    Pattern   => "aura.ads");
      
      Assert (Check   => More_Entries (Search),
              Message => "Error generating AURA spec - cannot find "
                &        "generated file!");
      
      Get_Next_Entry (Search => Search, Directory_Entry => Spec);
      Registrar.Registration.Enter_Unit (Spec);
      End_Search (Search);
   end Register_AURA_Spec;   
   
end AURA_Spec_Handling;
